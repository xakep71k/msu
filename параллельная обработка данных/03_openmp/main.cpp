#include <iostream>
#include <thread>
#include <sys/types.h>
#include <omp.h>

#define N 10

//
// программа демонстрирует примитив firstprivate
//

int main() {
    // устаналиваем количество поток столько сколько элментов в массиве "a"
    omp_set_num_threads(N);
    int a[N] = {0};
    int j = 1;

    //
    // firstprivate - Указывает, что каждый поток должен иметь собственный экземпляр переменной
    // и что переменная должна быть инициализирована со значением переменной,
    // так как она существует до параллельной конструкции.
    //
#pragma omp parallel for firstprivate(j)
    for(int i = 0; i < N; i++){
        a[i] = j++;
    }

    //
    // поскольку каждая итерация имеет свой собтвенный поток
    // и поскольку каждый пооток имеет собственный экземпляр j
    // то выведутся все единицы
    //
    for(int i = 0; i < N; i++) {
        std::cout << a[i] << ' ';
    }
    std::cout << std::endl;
}